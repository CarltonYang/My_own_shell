#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <ctype.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <poll.h>
#include <signal.h>

char** tokenify(const char *s, const char *om) {
    char *sdu = strdup(s);
    char *sdu2 = strdup(s);
    int count = 0;
    char *token; 
    for (token = strtok(sdu,om); token!=NULL; token = strtok(NULL,om)){
	count++; 
    }
    char **arr = malloc((count+1)*sizeof(char*));
    int index =0;
    for (token = strtok(sdu2,om); token!=NULL; token = strtok(NULL,om)){
	arr[index] = strdup(token);
	index++; 	
    }
    arr[count]=NULL;
    free(sdu);
    free(sdu2);
    return arr;  
}

void free_tokens(char **tokens) {
    int i = 0;
    while (tokens[i] != NULL) {
        free(tokens[i]); 
        i++;
    }
    free(tokens);
}

int main(int argc, char **argv) {
	int mode = 0; 
	char** cmd = tokenify("mode parallel "," \r\t\n");
	if (strcasecmp(cmd[0],"mode")== 0) {
		if (cmd[0][0] == 'p') {
			mode = 1;
		}
	}
	free_tokens(cmd); 
	printf("mode: %d\n", mode); 
	
   return 0;
}

